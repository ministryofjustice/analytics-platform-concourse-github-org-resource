#!/bin/sh

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# read inputs
destination=$1
payload=$(mktemp request.XXXXXX)
cat > $payload <&0

# parse parameters
access_token=$(jq -r '.source.access_token' < $payload)
name=$(jq -r '.source.name // ""' < $payload)
skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // false' < $payload)
verify_ssl=''
if $skip_ssl_verification; then
    verify_ssl='-k'
fi

org="${destination}/org"
repos="${destination}/repos"
echo -n "" > $repos

get_org() {
    local url="https://api.github.com/orgs/${name}"
    echo "Fetching ${name} org ..."
    github_api_request "$url" > $org
}

github_api_request() {
    curl $verify_ssl -s -H "Authorization: token $access_token" $@
}

next_url() {
    while read -r line; do
        if echo "$line" | grep -Eq '^Link:.*'; then
            url=$(echo "$line" | sed 's/.*\(https[^>]*\).*rel="next".*/\1/')
            if [[ "$url" = "$line" ]]; then
                url=""
            fi
            echo "$url"
            break
        fi
    done
}

split_headers() {
    awk -v bl=1 'bl{bl=0; h=($0 ~ /HTTP\/1/)} /^\r?$/{bl=1} {print $0>(h?"'"$1"'":"'"$2"'")}'
}

get_all() {
    local url="$1"
    local destfile="$2"
    local headers=$(mktemp headers.XXXXXX)
    local payloads=""
    local i=0

    while [ -n "$url" ]; do
        body=$(mktemp body.XXXXXX)
        payloads="$payloads $body"

        echo "Fetching $url"
        github_api_request -i "$url" | split_headers $headers $body

        url=$(next_url < $headers)
    done

    # combine each payload into a single JSON array
    jq -s '[.[][]]' $payloads > $destfile
}


if get_org; then
    get_all "$(jq -r '.repos_url' < $org)?per_page=100" $repos
    echo "$(jq '. | length' $repos) repos found"
fi

echo '{"version":{"ref":"none"}}' >&3
