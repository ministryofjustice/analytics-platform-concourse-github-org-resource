---
jobs:
- name: deploy
  plan:

  - get: release
    trigger: true
    params:
      include_source_tarball: true

  - get: common-tasks

  - task: dag-source
    file: common-tasks/extract-release-tarball.yaml
    output_mapping: {extracted: dag-source}

  - task: deploy-params
    file: common-tasks/parse-deploy-file.yaml
    input_mapping: {webapp-source: dag-source}
    params:
      IPS_DOM1: ((secrets.ip-dom1))
      IPS_QUANTUM: ((secrets.ip-quantum))
      IPS_102PF_WIFI: ((secrets.ip-102pf))

  - put: dag-docker-repo

  - task: dag-docker-image
    privileged: true
    file: common-tasks/webapp-docker-image.yaml
    input_mapping:
      webapp-docker-repo: dag-docker-repo
      webapp-source: dag-source
    params:
      AWS_ACCESS_KEY_ID: ((secrets.ecr-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((secrets.ecr-secret-access-key))

  - task: create-iam-role-name
    file: common-tasks/put-iam-role.yaml

    output_mapping: {output: aws}
    input_mapping:
      source: dag-source

    params:
      ORG_NAME: ((github-org))
      REPO_NAME: ((github-repo))
      AWS_ACCESS_KEY_ID: ((secrets.role-putter-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((secrets.role-putter-secret-access-key))
      AWS_NODES_ROLE_ARN: ((secrets.nodes-role-arn))
      APP_NAME: ((app-name))

- name: test
  plan:
  - get: pull-request
    trigger: true
    version: every

  - get: common-tasks

  # Update github 'checks' on PR
  - aggregate:
    - put: pull-request
      attempts: 3
      params:
        path: pull-request
        status: pending
        context: iam-role
    - put: pull-request
      attempts: 3
      params:
        path: pull-request
        status: pending
        context: unittests
    - put: pull-request
      attempts: 3
      params:
        path: pull-request
        status: pending
        context: syntax

  - aggregate:
    - task: build-dag-docker-image
      privileged: true
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: concourse/builder
        inputs:
          - name: pull-request
        params:
          REPOSITORY: dag/test
          CONTEXT: pull-request
        run:
          path: build
        outputs:
          - name: image

  - aggregate:
    - task: update-to-test-iam-role-name
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: concourse/docker-image-resource
        inputs:
          - name: pull-request
        run:
          path: sh
          args:
            - -ecx
            - |
              cp -R ./pull-request/* ./pull-request-edit
              jq '.role_name = "airflow_test_dag_role"' ./pull-request/deploy.json > ./pull-request-edit/deploy.json
              jq '.Statement += [{"Sid": "denyall","Action": ["*"],"Effect": "Deny","Resource": ["*"]}]' ./pull-request/iam_policy.json > ./pull-request-edit/iam_policy.json
              cat ./pull-request-edit/deploy.json
        outputs:
          - name: pull-request-edit

  # test creating the IAM role
  - aggregate:
    try:
      task: check-diff-in-iam-role
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/awscli
        inputs:
          - name: pull-request
        params:
          AWS_ACCESS_KEY_ID: ((secrets.role-putter-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((secrets.role-putter-secret-access-key))
          APP_NAME: ((app-name))
        run:
          path: sh
          args:
            - -ec
            - |
              export ROLE_NAME=$(cat ./pull-request/deploy.json | jq -r '.role_name')
              aws iam get-role-policy --role-name $ROLE_NAME --policy-name $APP_NAME | jq -r '.PolicyDocument' > ./pull-request/existing_iam_policy.json
              export ARE_SAME=$(jq --argfile a ./pull-request/iam_policy.json --argfile b ./pull-request/existing_iam_policy.json -n '$a==$b')
              if [ \"$ARE_SAME\" != \"true\" ]; then
                jq -S . ./pull-request/iam_policy.json > new.json
                jq -S . ./pull-request/existing_iam_policy.json > current.json
                echo -e '\033[0;31mChange in iam_policy.json'
                diff current.json new.json
                exit 166
              fi
              echo -e '\033[0;32mNo changes in iam_policy.json'
      on_failure:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: failure
          context: iam-policy-changed
      on_success:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: success
          context: iam-policy-changed
  - aggregate:
    - task: create-iam-role-name
      file: common-tasks/put-iam-role.yaml
      output_mapping: {output: aws}
      input_mapping:
        source: pull-request-edit
      params:
        ORG_NAME: ((github-org))
        REPO_NAME: ((github-repo))
        AWS_ACCESS_KEY_ID: ((secrets.role-putter-access-key-id))
        AWS_SECRET_ACCESS_KEY: ((secrets.role-putter-secret-access-key))
        AWS_NODES_ROLE_ARN: ((secrets.nodes-role-arn))
        APP_NAME: ((app-name))
      on_failure:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: failure
          context: iam-role
      on_success:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: success
          context: iam-role
    - task: run-test
      privileged: true
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: amidos/dcind
        inputs:
          - name: image
        run:
          path: sh
          args:
            - -ec
            - |
              source /docker-lib.sh
              start_docker
              docker load -i image/image.tar
              echo "Installing pytest"
              docker run --entrypoint "" dag/test:latest pip install pytest
              if [ -d "tests" ]; then
                echo "Running tests in tests dir"
                docker run --entrypoint "" dag/test:latest pytest tests
              fi
      on_failure:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: failure
          context: unittests
      on_success:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: success
          context: unittests
    - task: run-syntax
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: python/alpine
        inputs:
          - name: pull-request
        run:
          path: sh
          args:
            - -ec
            - |
              pip install flake8
              flake8 ./pull-request
      on_failure:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: failure
          context: syntax
      on_success:
        put: pull-request
        attempts: 3
        params:
          path: pull-request
          status: success
          context: syntax
  - put: dag-docker-repo
  - aggregate:
    - task: send-image-to-ecr
      privileged: true
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: concourse/docker-image-resource
            tag: 'pr-227'
        inputs:
          - name: dag-docker-repo
          - name: pull-request
          - name: image
        outputs:
          - name: dag-docker-image
        params:
          AWS_ACCESS_KEY_ID: ((secrets.ecr-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((secrets.ecr-secret-access-key))
        run:
          path: sh
          args:
            - -ec
            - |
              jq -r '.[2] | .value' $(pwd)/pull-request/.git/resource/metadata.json > $(pwd)/pull-request/tag
              jq -n "{
                source: {
                  repository: \"$(cat dag-docker-repo/uri)\",
                  aws_access_key_id: \"${AWS_ACCESS_KEY_ID}\",
                  aws_secret_access_key: \"${AWS_SECRET_ACCESS_KEY}\"
                },
                params: {
                  load_file: \"$(pwd)/image/image.tar\",
                  load_repository: \"dag/test\",
                  load_tag: \"latest\",
                  tag: \"$(pwd)/pull-request/tag\"
                }
              }" | /opt/resource/out dag-docker-image
resources:
- name: common-tasks
  type: git
  source:
    uri: https://github.com/ministryofjustice/analytics-platform-common-concourse-tasks.git

- name: release
  type: github-release
  webhook_token: ((secrets.github-webhook-token))
  check_every: 24h
  source:
    owner: ((github-org))
    repository: ((github-repo))
    access_token: ((secrets.github-access-token))

- name: dag-docker-repo
  type: ecr-repo
  source:
    name: ((app-name))
    region: ((secrets.aws-region))
    access_key_id: ((secrets.ecr-access-key-id))
    secret_access_key: ((secrets.ecr-secret-access-key))

- name: pull-request
  type: pull-request
  check_every: 10m
  webhook_token: ((secrets.github-webhook-token))
  source:
    repository: ((github-org))/((github-repo))
    access_token: ((secrets.github-access-token))

resource_types:
- name: ecr-repo
  type: docker-image
  source:
    repository: quay.io/mojanalytics/concourse-ecr-resource
    tag: v0.1.0

- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource
