#!/usr/bin/env python

import subprocess

from moj_analytics.concourse import Resource
import requests
import yaml

from common import get_all, get_org, github_api_request, pushed_at


fly = '/usr/local/bin/fly'


class ansi:
    green = '\x1b[92m'
    grey = '\x1b[90m'
    reset = '\x1b[0m'


@Resource
def create_pipelines(src_dir, source={}, params={}):
    print('Logging in to Concourse')
    fly_login(**source)

    print('Fetching existing pipelines', flush=True)
    pipelines = get_pipelines(**source)
    print(f'Found {len(pipelines)} pipelines', flush=True)

    print(f'Fetching {source["name"]} org', flush=True)
    org = get_org(**source)

    print('Fetching org repos', flush=True)
    repos = get_all(org['repos_url'], **source)

    for repo in repos:
        if repo['name'] in pipelines:
            print(
                f'Pipeline exists for {repo["name"]}',
                flush=True)
            continue

        if buildfile_exists(repo, **source):
            print(
                (
                    f'{ansi.green}Creating pipeline for '
                    f'{repo["name"]}{ansi.reset}'
                ),
                flush=True)
            fly_set_pipeline(repo, **source)

        else:
            print(
                f'{ansi.grey}No buildfile for {repo["name"]}{ansi.reset}',
                flush=True)

    timestamps = sorted(set(map(pushed_at, repos)))

    return {'version': {'ref': str(timestamps[-1])}}


def get_pipelines(concourse_url, team_name, **kwargs):
    with open('/root/.flyrc') as f:
        fly_config = yaml.load(f.read())
    token = fly_config['targets']['dev']['token']['value']

    url = f'{concourse_url}/api/v1/teams/{team_name}/pipelines'
    headers = {
        'Cookie': f'ATC-Authorization="Bearer {token}"',
    }
    pipelines = requests.get(url, headers=headers).json()
    return [p['name'] for p in pipelines]


def buildfile_exists(repo, **kwargs):
    url = repo['contents_url'].replace('{+path}', 'Jenkinsfile')
    return github_api_request(url, **kwargs).status_code != 404


def fly_login(concourse_url, username, password, team_name, **source):
    subprocess.run(
        [
            fly, '-t', 'dev', 'login', '-c', concourse_url, '-u', username,
            '-p', password, '-n', team_name
        ],
        stdout=subprocess.PIPE,
        check=True)


def fly_set_pipeline(repo, team_name, **kwargs):
    subprocess.run(
        [
            fly, '-t', 'dev', 'set-pipeline', '-p', repo["name"],
            '-c', '/opt/resource/pipeline.yaml', '-n', team_name
        ],
        stdout=subprocess.PIPE,
        check=True)


if __name__ == '__main__':
    create_pipelines()
